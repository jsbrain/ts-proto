syntax = "proto3";

package hero;

service HeroService {
  rpc FindOneHero(HeroById) returns (Hero) {}
  rpc FindOneVillain(VillainById) returns (Villain) {}
  rpc FindManyVillain(stream VillainById) returns (stream Villain) {}
  rpc FindHeroOrVillain(HeroOrVillainById) returns (HeroOrVillainResult) {}
}

message HeroById { int32 id = 1; }

message VillainById { int32 id = 1; }

message Hero {
  int32 id = 1;
  optional string name = 2;
}

message Villain {
  int32 id = 1;
  optional string name = 2;
}

message HeroOrVillainById {
  oneof choice {
    HeroById hero = 1;
    VillainById villain = 2;
  }
}

message HeroOrVillainResult {
  int32 code = 1;
  oneof result {
    Hero hero = 2;
    Villain villain = 3;
  }
  oneof meta {
    string details = 4;
    string error = 5;
    int32 count = 6;
  }
}

// message PleaseChoose {

//   string name = 1;

//   message Submessage { string name = 1; }

//   enum StateEnum {
//     UNKNOWN = 0;
//     ON = 2;
//     OFF = 3;
//   }

//   // Please to be choosing one of the fields within this oneof clause.
//   // This text exists to ensure we transpose comments correctly.
//   oneof choice {

//     // Use this if you want a number. Numbers are great. Who doesn't
//     // like them?
//     double a_number = 2;

//     // Use this if you want a string. Strings are also nice. Not as
//     // nice as numbers, but what are you going to do...
//     string a_string = 3;

//     Submessage a_message = 4;

//     // We also added a bool option! This was added after the 'age'
//     // field, so it has a higher number.
//     bool a_bool = 6;

//     bytes buncha_bytes = 10;

//     StateEnum anEnum = 11;
//   }

//   uint32 age = 5;

//   oneof either_or {
//     string either = 7;
//     string or = 8;
//     string third_option = 9;
//   }
// }

// /** For testing proto3's field presence feature. */
// message SimpleButOptional {
//   optional string name = 1;
//   optional int32 age = 2;
// }
